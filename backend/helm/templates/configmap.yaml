apiVersion: v1
kind: ConfigMap
metadata:
  name: {{ include "my-helm-chart.fullname" . }}-init-db
data:
  create_db.py: |
    import asyncpg
    import os
    import asyncio
    from dotenv import load_dotenv

    # Load environment variables
    load_dotenv()

    # Database Configuration
    DB_CONFIG = {
        "user": os.getenv("DB_USER"),
        "password": os.getenv("DB_PASS"),
        "host": os.getenv("DB_HOST"),
        "database": os.getenv("DB_NAME"),
        "port": os.getenv("DB_PORT", "5432"),
    }

    async def create_database_if_not_exists():
        try:
            # Connect to PostgreSQL without specifying a database name
            conn = await asyncpg.connect(
                user=DB_CONFIG["user"],
                password=DB_CONFIG["password"],
                host=DB_CONFIG["host"],
                port=int(DB_CONFIG["port"]),
                database="postgres",
            )

            # Check if the database exists
            databases = await conn.fetch("SELECT datname FROM pg_database WHERE datname = $1", DB_CONFIG["database"])
            if not databases:
                print(f" Database {DB_CONFIG['database']} not found. Creating...")
                await conn.execute(f'CREATE DATABASE "{DB_CONFIG["database"]}"')
                print(f" Database {DB_CONFIG['database']} created successfully!")
            else:
                print(f" Database {DB_CONFIG['database']} already exists.")
            await conn.close()
        except Exception as e:
            print(f" Error creating database: {e}")

    async def create_tables():
        try:
            conn = await asyncpg.connect(
                user=DB_CONFIG["user"],
                password=DB_CONFIG["password"],
                host=DB_CONFIG["host"],
                port=int(DB_CONFIG["port"]),
                database=DB_CONFIG["database"],
            )
            await conn.execute("""
                CREATE TABLE IF NOT EXISTS users (
                    id SERIAL PRIMARY KEY,
                    name VARCHAR(100) NOT NULL
                );
            """)
            print(" Users table created (if not exists).")
            await conn.close()
        except Exception as e:
            print(f" Error creating tables: {e}")

    async def initialize_database():
        await create_database_if_not_exists()
        await create_tables()

    if __name__ == "__main__":
        asyncio.run(initialize_database())

---
apiVersion: v1
kind: ConfigMap
metadata:
  name: {{ include "my-helm-chart.fullname" . }}-postgres-config
data:
  pg_hba.conf: |
    # TYPE  DATABASE        USER            ADDRESS                 METHOD
    local   all             all                                     trust
    host    all             all             0.0.0.0/0               md5
    host    all             all             ::/0                    md5
